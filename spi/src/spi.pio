; File: spi.pio

.program spi
.side_set 2 optional ; CS(1) CLK(0)
	pull block 		side 0b10

.wrap_target
	out x, 8		side 0b10	; x --> tx byte count.
	out y, 8		side 0b10	; y --> rx byte count.
	jmp

tx_only:
	nop				side 0b00	; Clk Low.
	out pins, 4
	nop				side 0b01	; Clk High.
	jmp x-- tx_only			; Low 시간 (x + 1) 사이클

tx_rx:
	nop				side 0b00	; Clk Low.
	out pins, 4
	in pins, 4
	nop				side 0b01	; Clk High.
	jmp x-- tx_rx			; Low 시간 (x + 1) 사이클

rx_only:
	nop				side 0b00	; Clk Low.
	out pins, 0
	in pins, 4
	nop				side 0b01	; Clk High.
	jmp x-- tx_rx			; Low 시간 (x + 1) 사이클


	jmp x-- lp1					; High 시간 (x + 1) 사이클
	mov x, y		side 0	[3]
data_out:
	nop				side 0b00	; Clk Low.
	out pins, 4
	in pins, 4
	nop				side 0b01	; Clk High.
	jmp x-- data_out			; Low 시간 (x + 1) 사이클
end:
	nop				side 0b10	; CE deassert.

.wrap

; total 8 + (2 * (in + 1)) cycles


;===================================================================

% c-sdk {
// CS,SCK,MOSI - consecutive.
static inline void spi_program_init(PIO pio, uint sm, uint offset, uint cs_pin, uint mosi, uint miso)
{
   pio_gpio_init(pio, cs_pin);
   pio_gpio_init(pio, cs_pin + 1);
   pio_gpio_init(pio, mosi);
   pio_gpio_init(pio, miso);

   pio_sm_config c = spi_program_get_default_config(offset);
   sm_config_set_sideset_pins(&c, cs_pin);
   sm_config_set_out_pins(&c, mosi, 1);
   sm_config_set_in_pins(&c, miso);

   sm_config_set_out_shift(&c, true, false, 8);
   sm_config_set_in_shift(&c, true, false, 8);

   pio_sm_set_consecutive_pindirs(pio, sm, cs_pin, 2, true); // CS, CLK.
   pio_sm_set_consecutive_pindirs(pio, sm, mosi, 1, true); // MOSI.
   pio_sm_set_consecutive_pindirs(pio, sm, miso, 1, false); // MISO.

   //sm_config_set_clkdiv(&c, 125000.0);
   sm_config_set_clkdiv(&c, 250000.0);
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
}

%}